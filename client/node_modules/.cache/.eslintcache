[{"/Users/pavery/dev/wordle/client/src/index.js":"1","/Users/pavery/dev/wordle/client/src/App.js":"2","/Users/pavery/dev/wordle/client/src/components/WordleGame.js":"3","/Users/pavery/dev/wordle/client/src/components/GameStats.js":"4","/Users/pavery/dev/wordle/client/src/services/api.js":"5"},{"size":219,"mtime":1759203367577,"results":"6","hashOfConfig":"7"},{"size":1130,"mtime":1759203158373,"results":"8","hashOfConfig":"7"},{"size":4764,"mtime":1759203158373,"results":"9","hashOfConfig":"7"},{"size":2526,"mtime":1759203158373,"results":"10","hashOfConfig":"7"},{"size":1674,"mtime":1759203158373,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"iogu41",{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"/Users/pavery/dev/wordle/client/src/index.js",[],"/Users/pavery/dev/wordle/client/src/App.js",[],"/Users/pavery/dev/wordle/client/src/components/WordleGame.js",["24"],"import React, { useState, useEffect } from 'react';\nimport api from '../services/api';\n\nconst WordleGame = () => {\n  const [game, setGame] = useState(null);\n  const [guesses, setGuesses] = useState([]);\n  const [currentGuess, setCurrentGuess] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [gameStatus, setGameStatus] = useState(''); // 'won', 'lost', 'playing'\n\n  useEffect(() => {\n    createNewGame();\n  }, []);\n\n  const createNewGame = async () => {\n    setLoading(true);\n    setError('');\n    try {\n      const response = await api.createGame(6);\n      setGame(response.game);\n      setGuesses([]);\n      setCurrentGuess('');\n      setGameStatus('playing');\n    } catch (err) {\n      setError(`Failed to create game: ${err.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const submitGuess = async () => {\n    if (!currentGuess || currentGuess.length !== 5) {\n      setError('Please enter a 5-letter word');\n      return;\n    }\n\n    if (!game) {\n      setError('No active game');\n      return;\n    }\n\n    setLoading(true);\n    setError('');\n    \n    try {\n      const response = await api.makeGuess(game.id, currentGuess);\n      \n      // Refresh game state\n      const gameState = await api.getGame(game.id);\n      setGame(gameState.game);\n      setGuesses(gameState.guesses || []);\n      \n      // Check game status\n      if (gameState.game.is_won) {\n        setGameStatus('won');\n      } else if (gameState.game.is_completed) {\n        setGameStatus('lost');\n      }\n      \n      setCurrentGuess('');\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleInputChange = (e) => {\n    const value = e.target.value.toUpperCase().replace(/[^A-Z]/g, '');\n    if (value.length <= 5) {\n      setCurrentGuess(value);\n      setError('');\n    }\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter') {\n      submitGuess();\n    }\n  };\n\n  const renderGameBoard = () => {\n    const rows = [];\n    const maxGuesses = game?.max_guesses || 6;\n\n    for (let i = 0; i < maxGuesses; i++) {\n      const guess = guesses[i];\n      const isCurrentRow = i === guesses.length && gameStatus === 'playing';\n      \n      rows.push(\n        <div key={i} className=\"guess-row\">\n          {renderGuessRow(guess, isCurrentRow)}\n        </div>\n      );\n    }\n\n    return <div className=\"game-board\">{rows}</div>;\n  };\n\n  const renderGuessRow = (guess, isCurrentRow) => {\n    const tiles = [];\n    \n    for (let i = 0; i < 5; i++) {\n      let letter = '';\n      let status = '';\n      \n      if (guess && guess.result && guess.result[i]) {\n        letter = guess.result[i].letter;\n        status = guess.result[i].status;\n      } else if (isCurrentRow && currentGuess[i]) {\n        letter = currentGuess[i];\n        status = 'filled';\n      }\n      \n      tiles.push(\n        <div key={i} className={`letter-tile ${status}`}>\n          {letter}\n        </div>\n      );\n    }\n    \n    return tiles;\n  };\n\n  const isGameOver = gameStatus === 'won' || gameStatus === 'lost';\n  const canSubmit = currentGuess.length === 5 && !loading && !isGameOver;\n\n  return (\n    <div className=\"game-container\">\n      {loading && <div className=\"loading\">Loading...</div>}\n      \n      {error && <div className=\"error-message\">{error}</div>}\n      \n      {game && (\n        <div className=\"game-info\">\n          <div>Game ID: {game.id}</div>\n          <div>Guesses: {game.guess_count} / {game.max_guesses}</div>\n          \n          {gameStatus === 'won' && (\n            <div className=\"game-status won\">\n              ðŸŽ‰ Congratulations! You won in {game.guess_count} guesses!\n            </div>\n          )}\n          \n          {gameStatus === 'lost' && (\n            <div className=\"game-status lost\">\n              ðŸ˜ž Game over! The word was: {game.target_word}\n            </div>\n          )}\n        </div>\n      )}\n\n      {game && renderGameBoard()}\n\n      {!isGameOver && (\n        <div className=\"input-section\">\n          <input\n            type=\"text\"\n            value={currentGuess}\n            onChange={handleInputChange}\n            onKeyPress={handleKeyPress}\n            placeholder=\"Enter your guess\"\n            className=\"guess-input\"\n            maxLength={5}\n            disabled={loading}\n          />\n          <button\n            onClick={submitGuess}\n            disabled={!canSubmit}\n            className=\"submit-btn\"\n          >\n            Submit\n          </button>\n        </div>\n      )}\n\n      <div className=\"game-controls\">\n        <button onClick={createNewGame} className=\"new-game-btn\" disabled={loading}>\n          New Game\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default WordleGame;\n","/Users/pavery/dev/wordle/client/src/components/GameStats.js",[],"/Users/pavery/dev/wordle/client/src/services/api.js",["25"],"// API service for interacting with the Wordle backend\nconst API_BASE_URL = process.env.REACT_APP_API_URL || '';\n\nclass WordleAPI {\n  async makeRequest(endpoint, options = {}) {\n    const url = `${API_BASE_URL}${endpoint}`;\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n      ...options,\n    };\n\n    try {\n      const response = await fetch(url, config);\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.error || `HTTP error! status: ${response.status}`);\n      }\n\n      return data;\n    } catch (error) {\n      console.error('API request failed:', error);\n      throw error;\n    }\n  }\n\n  // Create a new game\n  async createGame(maxGuesses = 6) {\n    return this.makeRequest('/api/games', {\n      method: 'POST',\n      body: JSON.stringify({ max_guesses: maxGuesses }),\n    });\n  }\n\n  // Get game state with guesses\n  async getGame(gameId) {\n    return this.makeRequest(`/api/games/${gameId}`);\n  }\n\n  // Make a guess\n  async makeGuess(gameId, guessWord) {\n    return this.makeRequest(`/api/games/${gameId}`, {\n      method: 'POST',\n      body: JSON.stringify({ guess_word: guessWord }),\n    });\n  }\n\n  // Get recent games\n  async getRecentGames() {\n    return this.makeRequest('/api/games');\n  }\n\n  // Get game statistics\n  async getStats() {\n    return this.makeRequest('/api/stats');\n  }\n\n  // Delete a game\n  async deleteGame(gameId) {\n    return this.makeRequest(`/api/games/${gameId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  // Health check\n  async healthCheck() {\n    return this.makeRequest('/health');\n  }\n}\n\nexport default new WordleAPI();\n",{"ruleId":"26","severity":1,"message":"27","line":47,"column":13,"nodeType":"28","messageId":"29","endLine":47,"endColumn":21},{"ruleId":"30","severity":1,"message":"31","line":74,"column":1,"nodeType":"32","endLine":74,"endColumn":32},"no-unused-vars","'response' is assigned a value but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign instance to a variable before exporting as module default","ExportDefaultDeclaration"]