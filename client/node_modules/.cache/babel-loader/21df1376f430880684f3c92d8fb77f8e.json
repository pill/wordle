{"ast":null,"code":"// API service for interacting with the Wordle backend\nconst API_BASE_URL = process.env.REACT_APP_API_URL || '';\nclass WordleAPI {\n  async makeRequest(endpoint, options = {}) {\n    const url = `${API_BASE_URL}${endpoint}`;\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      },\n      ...options\n    };\n    try {\n      const response = await fetch(url, config);\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || `HTTP error! status: ${response.status}`);\n      }\n      return data;\n    } catch (error) {\n      console.error('API request failed:', error);\n      throw error;\n    }\n  }\n\n  // Create a new game\n  async createGame(maxGuesses = 6) {\n    return this.makeRequest('/api/games', {\n      method: 'POST',\n      body: JSON.stringify({\n        max_guesses: maxGuesses\n      })\n    });\n  }\n\n  // Get game state with guesses\n  async getGame(gameId) {\n    return this.makeRequest(`/api/games/${gameId}`);\n  }\n\n  // Make a guess\n  async makeGuess(gameId, guessWord) {\n    return this.makeRequest(`/api/games/${gameId}`, {\n      method: 'POST',\n      body: JSON.stringify({\n        guess_word: guessWord\n      })\n    });\n  }\n\n  // Get recent games\n  async getRecentGames() {\n    return this.makeRequest('/api/games');\n  }\n\n  // Get game statistics\n  async getStats() {\n    return this.makeRequest('/api/stats');\n  }\n\n  // Delete a game\n  async deleteGame(gameId) {\n    return this.makeRequest(`/api/games/${gameId}`, {\n      method: 'DELETE'\n    });\n  }\n\n  // Health check\n  async healthCheck() {\n    return this.makeRequest('/health');\n  }\n}\nexport default new WordleAPI();","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","WordleAPI","makeRequest","endpoint","options","url","config","headers","response","fetch","data","json","ok","Error","error","status","console","createGame","maxGuesses","method","body","JSON","stringify","max_guesses","getGame","gameId","makeGuess","guessWord","guess_word","getRecentGames","getStats","deleteGame","healthCheck"],"sources":["/Users/pavery/dev/wordle/client/src/services/api.js"],"sourcesContent":["// API service for interacting with the Wordle backend\nconst API_BASE_URL = process.env.REACT_APP_API_URL || '';\n\nclass WordleAPI {\n  async makeRequest(endpoint, options = {}) {\n    const url = `${API_BASE_URL}${endpoint}`;\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n      ...options,\n    };\n\n    try {\n      const response = await fetch(url, config);\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.error || `HTTP error! status: ${response.status}`);\n      }\n\n      return data;\n    } catch (error) {\n      console.error('API request failed:', error);\n      throw error;\n    }\n  }\n\n  // Create a new game\n  async createGame(maxGuesses = 6) {\n    return this.makeRequest('/api/games', {\n      method: 'POST',\n      body: JSON.stringify({ max_guesses: maxGuesses }),\n    });\n  }\n\n  // Get game state with guesses\n  async getGame(gameId) {\n    return this.makeRequest(`/api/games/${gameId}`);\n  }\n\n  // Make a guess\n  async makeGuess(gameId, guessWord) {\n    return this.makeRequest(`/api/games/${gameId}`, {\n      method: 'POST',\n      body: JSON.stringify({ guess_word: guessWord }),\n    });\n  }\n\n  // Get recent games\n  async getRecentGames() {\n    return this.makeRequest('/api/games');\n  }\n\n  // Get game statistics\n  async getStats() {\n    return this.makeRequest('/api/stats');\n  }\n\n  // Delete a game\n  async deleteGame(gameId) {\n    return this.makeRequest(`/api/games/${gameId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  // Health check\n  async healthCheck() {\n    return this.makeRequest('/health');\n  }\n}\n\nexport default new WordleAPI();\n"],"mappings":"AAAA;AACA,MAAMA,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,EAAE;AAExD,MAAMC,SAAS,CAAC;EACd,MAAMC,WAAWA,CAACC,QAAQ,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IACxC,MAAMC,GAAG,GAAG,GAAGR,YAAY,GAAGM,QAAQ,EAAE;IACxC,MAAMG,MAAM,GAAG;MACbC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,GAAGH,OAAO,CAACG;MACb,CAAC;MACD,GAAGH;IACL,CAAC;IAED,IAAI;MACF,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACJ,GAAG,EAAEC,MAAM,CAAC;MACzC,MAAMI,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAElC,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,KAAK,IAAI,uBAAuBN,QAAQ,CAACO,MAAM,EAAE,CAAC;MACzE;MAEA,OAAOL,IAAI;IACb,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdE,OAAO,CAACF,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,MAAMG,UAAUA,CAACC,UAAU,GAAG,CAAC,EAAE;IAC/B,OAAO,IAAI,CAAChB,WAAW,CAAC,YAAY,EAAE;MACpCiB,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEC,WAAW,EAAEL;MAAW,CAAC;IAClD,CAAC,CAAC;EACJ;;EAEA;EACA,MAAMM,OAAOA,CAACC,MAAM,EAAE;IACpB,OAAO,IAAI,CAACvB,WAAW,CAAC,cAAcuB,MAAM,EAAE,CAAC;EACjD;;EAEA;EACA,MAAMC,SAASA,CAACD,MAAM,EAAEE,SAAS,EAAE;IACjC,OAAO,IAAI,CAACzB,WAAW,CAAC,cAAcuB,MAAM,EAAE,EAAE;MAC9CN,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEM,UAAU,EAAED;MAAU,CAAC;IAChD,CAAC,CAAC;EACJ;;EAEA;EACA,MAAME,cAAcA,CAAA,EAAG;IACrB,OAAO,IAAI,CAAC3B,WAAW,CAAC,YAAY,CAAC;EACvC;;EAEA;EACA,MAAM4B,QAAQA,CAAA,EAAG;IACf,OAAO,IAAI,CAAC5B,WAAW,CAAC,YAAY,CAAC;EACvC;;EAEA;EACA,MAAM6B,UAAUA,CAACN,MAAM,EAAE;IACvB,OAAO,IAAI,CAACvB,WAAW,CAAC,cAAcuB,MAAM,EAAE,EAAE;MAC9CN,MAAM,EAAE;IACV,CAAC,CAAC;EACJ;;EAEA;EACA,MAAMa,WAAWA,CAAA,EAAG;IAClB,OAAO,IAAI,CAAC9B,WAAW,CAAC,SAAS,CAAC;EACpC;AACF;AAEA,eAAe,IAAID,SAAS,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}